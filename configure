#!/usr/bin/perl

use warnings;
use strict;

use Getopt::Long;
use File::Spec::Functions qw(catdir); # Handles trailing/repeated slashes

# A compatible subset of an autoconf-like configure script.
# Used to substitute values from spec macros into the Makefile.
# Behavior based upon
#   https://www.gnu.org/prep/standards/html_node/Configuration.html
#   https://www.gnu.org/prep/standards/html_node/Directory-Variables.html

my %options;
my %variables;

Getopt::Long::Configure('pass_through');
Getopt::Long::GetOptions(\%options,
  'prefix:s',
  'exec-prefix:s',
  'bindir:s',
  'sysconfdir:s',
  'libdir:s',
  'datarootdir:s',
  'datadir:s',
  'localedir:s',
  'mandir:s',
  'debconfigdir:s',
  'pod2man:s',
  'msgfmt:s',
  '<>' => sub {
    my ($arg) = shift;
    if ($arg =~ m/VERSION=(.*)/) {
      $variables{'version'} = $1;
    } else {
      warn "WARN: Skipping unrecognized arg: $arg\n";
    }
  },
);

$options{'prefix'} //= '';
$options{'exec_prefix'} //= $options{'prefix'};
$options{'bindir'} //= catdir($options{'exec_prefix'}, 'bin');
$options{'sysconfdir'} //= catdir($options{'prefix'}, 'etc');
$options{'libdir'} //= catdir($options{'exec_prefix'}, 'lib');
$options{'libexecdir'} //= catdir($options{'exec_prefix'}, 'libexec');
$options{'datarootdir'} //= catdir($options{'prefix'}, 'share');
$options{'datadir'} //= $options{'datarootdir'};
$options{'localedir'} //= catdir($options{'datarootdir'}, 'locale');
$options{'mandir'} //= catdir($options{'datarootdir'}, 'man');
$options{'debconfigdir'} //= catdir($options{'prefix'}, 'lib', 'debbuild'); # Can't use libdir to define this on 64-bit or Debian systems

$variables{'version'} //= $ENV{'VERSION'};
$variables{'version'} //= '0.0';

$options{'pod2man'} //= check_for_program('pod2man', 'install manpages');
$options{'msgfmt'} //= check_for_program('msgfmt', 'install locale files');

# Die if runtime dependencies are missing
print 'checking for /etc/os-release... ';
if (-e '/etc/os-release') {
  print "yes\n";
} else {
  print "no\n";
  if (check_for_program('/usr/bin/lsb_release', 'be able to run debbulid') eq ':') {
    die "ERROR: Unable to find os-release or lsb_release. $0 failed.\n";
  }
}

my $in_filename = 'Makefile.in';
print "Reading $in_filename...\n";
open(my $in, '<', $in_filename);
my $template = do { local $/ = <$in> }; # Slurp entire file

print "Substituting the following values:\n";
my %substitutions = (%variables, %options);
while (my ($name, $value) = each %substitutions) {
  print "  $name=$value\n";
  my $macro = '@'.uc($name).'@';
  $template =~ s/\Q$macro\E/$value/g;
}

my $out_filename = 'Makefile';
print "Writing $out_filename...\n";
open(my $out, '>', $out_filename);
print $out $template;
print "Done.\n";

sub check_for_program {
  my ($name, $action) = @_;

  print "checking for $name... ";

  my $output = `$name --help`;
  if ($? == 0) {
    print "$name\n";
    return $name;
  } else {
    print "no\n";
    warn "WARN: Unable to find $name, will not $action\n";
    return ':'; # Will result in a no-op when make executes this
  }
}
